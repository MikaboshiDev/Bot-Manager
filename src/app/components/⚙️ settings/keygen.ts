import { EmbedBuilder, Message } from 'discord.js';
import emojis from '../../../../config/json/emojis.json';
import keygen from '../../../models/premium/clave';
module.exports = {
  name: 'keygen',
  description: 'generate discord bot premium feature keys',
  aliases: ['key-gen', 'keygenerator', 'key-generator'],
  permissions: ['Administrator'],
  category: 'settings',
  premium: false,
  cooldown: 20,
  examples: [`keygen [subcommand] [properties] [key]`, `keygen [command] [key]`],
  subcommands: [`keygen generate <duration> <amount>`, `keygen activate <key>`, `keygen desactivate <key>`],
  async execute(client: any, message: Message, args: string[], prefix: any) {
    const subcommand = args[0];
    switch (subcommand) {
      case 'generate':
        {
          const duration = Number(args[1].replace(/(d|h|m|s)/g, '')) * 1000;
          if (!duration || isNaN(duration) || duration <= 0)
            return message.channel.send({
              content: [
                `${emojis.error} Hello ${message.author}, please tell me how long you want the key to last`,
                `**Example:** \`${prefix}keygen generate 30d 100\``,
              ].join('\n'),
            });

          let key = generateKey();
          message.author
            .send({
              content: `${emojis.correct} New Giveaway Key generated in the server **${message.guild?.name}**`,
              embeds: [
                new EmbedBuilder()
                  .setTitle(`üîë New Key!`)
                  .setDescription('```' + key + '```')
                  .addFields(
                    { name: `Generated by`, value: `\`${message.author.tag}\` \`${message.author.id}\`` },
                    { name: `Subscription`, value: `\`${args[1]}\`` },
                    { name: `Status`, value: `\`UNUSED\`` }
                  )
                  .setColor(client.color),
              ],
            })
            .catch(() => {
              message.react('‚ùå');
              return message.reply({
                content: [
                  `${emojis.error} Hello ${message.author}, I couldn't send you the key details via DM!`,
                  `**Key deleted!**`,
                ].join('\n'),
              });
            });

          const amount = parseInt(args[2]);
          if (!amount || isNaN(amount) || amount <= 0)
            return message.reply({
              content: [
                `${emojis.error} Hello ${message.author}, please tell me how much money you want the key to have`,
                `**Example:** \`${prefix}keygen generate 30d 100\``,
              ].join('\n'),
            });

          let data = new keygen({
            key,
            money: amount,
            duration,
            activated: false,
          });
          data.save();
          message.react('‚úÖ');
          message.reply({
            content: [
              `${emojis.correct} Hello ${message.author}, New Key Generated in the Database`,
              `*Key information has been sent to your DMs!*`,
            ].join('\n'),
          });
        }
        break;
      case 'activate':
        {
          const key = args[1];
          if (!key || key.length < 15)
            return message.reply({
              content: [
                `${emojis.error} Hello ${message.author}, please tell me the key you want to activate`,
                `**Example:** \`${prefix}keygen activate XXXX-XXXX-XXXX-XXXX\``,
              ].join('\n'),
            });

          const data = await keygen.findOne({ key });
          if (!data || data.activated === true)
            return message.reply({
              content: [
                `${emojis.error} Hello ${message.author}, the key you provided is already activated or does not exist!`,
                `**Example:** \`${prefix}keygen activate XXXX-XXXX-XXXX-XXXX\``,
              ].join('\n'),
            });

          await keygen.findOneAndUpdate(
            { key },
            {
              $set: {
                activated: true,
              },
            }
          );

          message.react('‚úÖ');
          message.reply({
            content: [
              `${emojis.correct} Hello ${message.author}, the key **${key}** has been activated!`,
              `*Key information has been sent to your DMs!*`,
            ].join('\n'),
          });
        }
        break;
      case 'desactivate': {
        const key = args[1];
        if (!key || key.length < 15)
          return message.reply({
            content: [
              `${emojis.error} Hello ${message.author}, please tell me the key you want to deactivate`,
              `**Example:** \`${prefix}keygen deactivate XXXX-XXXX-XXXX-XXXX\``,
            ].join('\n'),
          });

        const data = await keygen.findOne({ key });
        if (!data || data.activated === false)
          return message.reply({
            content: [
              `${emojis.error} Hello ${message.author}, the key you provided is already deactivated or does not exist!`,
              `**Example:** \`${prefix}keygen deactivate XXXX-XXXX-XXXX-XXXX\``,
            ].join('\n'),
          });

        await keygen.findOneAndUpdate(
          { key },
          {
            $set: {
              activated: false,
            },
          }
        );

        message.react('‚úÖ');
        message.reply({
          content: [
            `${emojis.correct} Hello ${message.author}, the key **${key}** has been deactivated!`,
            `*Key information has been sent to your DMs!*`,
          ].join('\n'),
        });
      }
    }
  },
};

function generateKey() {
  let possibilities = 'ABCDEFGHIJLKMNOPQRSTUVWXYZ0123456789';
  let part1 = '';
  let part2 = '';
  let part3 = '';
  let part4 = '';
  for (let i = 0; i < 4; i++) {
    part1 += possibilities.charAt(Math.floor(Math.random() * possibilities.length));
    part2 += possibilities.charAt(Math.floor(Math.random() * possibilities.length));
    part3 += possibilities.charAt(Math.floor(Math.random() * possibilities.length));
    part4 += possibilities.charAt(Math.floor(Math.random() * possibilities.length));
  }

  return `${part1}-${part2}-${part3}-${part4}`;
}
